PYTHON VE PİP SÜRÜMLERİNİ KONTROL EDİN
python --version
pip --version

SOURCE KODU GÖRMEK İÇİN
CTRL + click

ENV DOSYASINI OLUŞTUR.
python -m venv env
(virtual env kurduk)(bunu yapmamızın sebbei her projeye ait package ler var 
biz bunları globale yüklemek istemiyoruz ve bir de 
sürümlerin uyuşmama gibi bir sorun çıkarmaması için kullanılır)
Install virtual environment
(bunu yapmamızın sebebi sistemlerin, paketlerin versiyonları değişse bile
daha sonradan hata vermeden kullanılabilsin diye global'de değil virtual'da çalışmak lazım.)

ENV AKTİF ET.
.\env\Scripts\activate
BASH İLE AKTİF ETMEK İÇİN
source env/Scripts/Activate
LINUX/MAC
source env/bin/activate

AKTİF HALİ PASİF HALE ÇEVİRMEK İÇİN.
deactivate

AKTİF ETMEDE SORUN YAŞARSAN AŞAĞIDAKİ KOMUTU ÇALIŞTIR.
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted

DJANGO KURULUMU.
pip install django

DJANGO İLE RESTFRAMEWORK KURULUMU.
pip install djangorestframework

PİP GÜNCEL DEĞİL WARNİNGİ SONRASI PİP GÜNCELLEME.
python -m pip install --upgrade pip

YÜKLÜ PAKETLERİ LİSTELER
pip freeze veya pip list

PROJEDEKİ PAKETLERİ REQUIREMENTS.TXT'YE YÜKLEME.
pip freeze > requirements.txt
(bunu yapmamızın sebebi projede kullandığımız paketleri REQUIREMENTS.TXT yükleyerek proje başkaları tarafından clonlandığında paketlerin otamatik projeye yüklenmesini sağlamaktır. Bu yüzden projeyi kapatmadan önce bu işlemi yapmak gerekli.)

PULL EDILEN PROJEYI AYAĞA KALDIRMAK IÇIN
pip install -r requirements.txt
(bunu repodan bir proje indirdiğimizde requirements.txt deki paketleri yüklemek için kullanıyoruz)

GİTİGNORE OLUŞTUR.
googleden ara ve bul. oluşturduğun env dosyası ismi gitignore Environments bölümünde olmalı. env'den farklı bir isim verdiysen gitignore içine ilgili bölüme dosya ismini ekle.
(https://www.toptal.com/developers/gitignore/api/django)
(githuba projeyi göndermek için içeriğini toptal gibi sitelerden alabiliriz yada önceki projelerimizden alabiliriz)

PROJE OLUŞTUR
django-admin startproject projectname .
(içiçe olmadan proje başlatma komutu. eğer nokta koymazsak projeyi içiçe klasör yapısıyla oluşturyor. ilk oluşturmada main dosya ismi tercihi bestpractice.)

APP OLUŞTURMA
python manage.py startapp (appname)
(appname)appı oluştrduk)(bunu yaptıktan sonra proje dizinine gidip settings.py e girip
installed appse appimizi tanıtmamız gerekiyor)

SERVER ÇALIŞTIR
python manage.py runserver
(SERVERyi ayağa kaldırma default port 8000)

SERVER DURDUR
ctrl + C

PORT NUMARASINI DEĞIŞTIRME
python manage.py runserver 8080

(MAKEMİGRATE) OLUŞTURULAN TABLOLAR İLE İLGİLİ GEREKLİ HAZIRLIKLARI YAP:
python manage.py makemigrations
(Database'de bi değişiklik yapacaksam bu ve aşağıdaki 2 komutun çalıştırılması gerekli.)
(app/migrations/ altında 0001_initial isminde bir dosya oluşturarak içerisine model'deki değişiklikleri attı.)

(MİGRATE) PAKETLERİN VERİTABANINA AKTARILMASI, TABLOLARIN OLUŞTURULMASI İÇİN. PROJE ÇALIŞTIRIRILIRKEN ALINAN ERRORDAN KURTULMAYI SAĞLAR.
python manage.py migrate

SUPERUSER OLUŞTURMA
python manage.py createsuperuser
1.python manage.py createsuperuser
2.username belirleyin
3.emaili bos gecebilirsiniz.
4.password yazsaniz da gorunmuyor ama yazabiliyorsunuz, bir sifre belirleyin, tekrar sordugunda ayni sifreyi bir daha yazin
5.python manage.py runserver ile tekrar baslatin
6.url'nin sonuna admin yazarak login sayfasina gecin
7.user ve password bilginizle giris yapin

APP/MODEL'İ ADMIN USERDE GÖRMEK İÇİN
app/admin.py içerisinde import et ve tanımla.
from .models import Student
admin.site.register(Student)

ORM KOMUTLARINI YAZMAK İÇİN
https://docs.djangoproject.com/en/4.1/topics/db/queries/
(shell, django ile komut satırı üzerinden iletişim kurmaya yarar.)
python manage.py shell
exit() --> Çıkış

from appName.models import className 
s1 = Student.objects.all()
s1 = Student.objects.get(...)
s1 = Student.objects.filter(...)

s1 = Student(first_name='aaa', last_name='a') # atributlara atama yap bu şekilde yapıldığında save etmek gerekli.
s1.number = 8   # atributlara atama yap
s1.save() # Kaydet

s1 = Student.objects.create(first_name="bbb", last_name="b") # create ile atributlara atama yap

s1 = Student.objects.exclude(number=9) # number'i 9 olmayan atribultarı 
s1[0] veya  s1.first() # indexleme, slice'lama veya first() metodu ile ulaşabiliriz.
s1 = Student.objects.filter(number=9) # number'i 9 olan atribultarı bir liste içerisinde döndürür.
s1 = Student.objects.filter(number__gte=9) # number'i 9  ve 9'dan büyük olan atribultarı.
s1 = Student.objects.filter(number__gt=1) # number'i 9'dan büyük olan atribultarı.
s1 = Student.objects.filter(number__lt=9) # number'i 9'dan küçük olan atribultarı.
s1 = Student.objects.filter(first_name__startswith="e") # first_name'i e ile başlayanlar. casesensitive değil(postsql'den dolayı.)
s1 = Profile.objects.get(id=3)  # id'si 3 olan
s1 = Student.objects.get(first_name__exact="sem") # first_name'i sem olan (casesenstive)
s1 = Student.objects.get(first_name__contains="ü") # first_name'i içerisinde ü olan

print(s1.query) # SQL şeklinde içeriğini gösterir.

Parent Modeldeki field'e ulaşma. 005 FBV dersi.
1- Child'deki field'in foreignKey ile tanımlanmış olması gerekli.
2- Child'deki ilgili Field'e ulaş -->  s1 = Student.objects.get(number=36) # <Student: Memal cemal>
3- s1'in bulunduğu tablodaki foreignKey fieldi ve devamında Parent'da hangi stunu istiyorsak erişiyoruz.(number=36 olan öğrencinin Path adı.) --> s1.path.path_name # 'DS'
4- Bir değişkene atayabilirsin. --> path_name = s1.path.path_name # 'DS'
5- Path modelinde "d" ile başlayan fiedler -->  p1 = Path.objects.filter(path_name__startswith="d") --> <QuerySet [<Path: DS>]>
6- Path'i DS olan öğrenciler. --> p1[0].students.all() #  [<Student: s ss>,<Student: Memal cemal>]
7- 6'ncı md. deki students child field'de related_name='students' properties verildiği için kullanıldı.
8- first_name içerisinde e karakteri bulunan öğrenciler. --> p[0].students.filter(first_name__contains="e") # <QuerySet [<Student: Memal cemal>]>

PYTHON'DA RESİMLERLE İŞLEM YAPILACAKSA AŞAĞIDAKİ KÜTÜPHANEYİ KUR.
pip install Pillow 
Sonrasında bazı ayarlar yapmak gerekli.(3 ayar yapılacak.)
settings.py dosyasına aşağıdaki komutları ekle.
MEDIA_URL = 'media/'  --> yol belirtiyoruz. (1)
MEDIA_ROOT = BASE_DIR / 'media/' --> media'ların yüklendiği root klasörü. Yerel olduğu için media klasörü. (2)
main urls.py ekle (settings.py de tanımladığımız yolları urls.py de belirtmeliyiz.)(3)
from django.conf import settings
from django.conf.urls.static import static
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
detay-->https://docs.djangoproject.com/en/4.1/howto/static-files/



'''
on_delete properties:
    # CASCADE -> if primary deleted, delete foreing too. Field silindiğinde Tablonunda silinmesini istiyorsak.
    # SET_NULL -> if primary deleted, set foreign to NULL. (null=True)
    # SET_DEFAULT -> if primary deleted, set foreing to DEFAULT value. (default='Value')
    # DO_NOTHING -> if primary deleted, do nothing.
    # PROTECT -> if foreign is exist, can not delete primary. Silinecek field'in bağlı olduğu başka tablolarda varsa önce önce onları silmek gerekir.
'''

.ENV DEKİ KEYLERİ VE ID'LERI OKUYABİLMEK İÇİN AŞAĞIDAKİ PAKETİ YÜKLE
pip install python-decouple
.env'deki key value'si tırnaksız ve = ile arasında boşluk olmayacak.
sonrasında main/settings.py'de aşağıdaki işlemi yap.
from decouple import config
SECRET_KEY = config("SECRET_KEY")

REST_FRAMEWORK KURULUMU
pip install djangorestframework
sonra main/settings/INSTALLED_APPS'e ekle.
'rest_framework',
serializers' kullanabilmek için REST_FRAMEWORK'ü yüklemelisin.
https://www.django-rest-framework.org/

****
pip install module_name -> modül yükle
pip install -r filename -> dosyadaki modülleri yükle.