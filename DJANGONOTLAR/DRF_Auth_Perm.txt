Authentication => bir kişinin ya da bir şeyin iddia ettiği olduğunu doğrulamak için yapılan işlemdir. Bu genellikle bir kullanıcı adı ve parola gibi kimlik bilgileri ya da bir parmak izi veya yüz tanıma gibi biyometrik veriler kullanılarak yapılır.

Authorization =>  doğrulanmış kullanıcının izinlerine göre belirli kaynaklara veya eylemlere erişimi verme veya reddetme işlemidir. Örneğin, doğrulanmış bir kullanıcının belirli belgeleri okumaya izin verilmiş olabilir, ancak düzenleme veya silme yetkisi olmayabilir.

Global ve yerel Yapılabilir.

1- Global için;
https://www.django-rest-framework.org/api-guide/authentication/

-
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ]
} --> settings.py'a ekle.

-
from rest_framework.permissions import  IsAuthenticated, IsAdminUser, IsAuthenticatedOrReadOnly  --> views'e ihtiyacın olanları import et.

- aşağıda permission ile bu endpointe kim ulaşabilir onu tanımlıyoruz.
#* Authenticat olan herkes CRUD yapabilir
# permission_classes = [IsAuthenticated]

#* sadece admin olan CRUD yapabilir
permission_classes = [IsAdminUser]

#* Authenticat olan herşeyi yapar, olmayan (sadece) GET(read) yapar.
# permission_classes = [IsAuthenticatedOrReadOnly] --> views'e class içerisine ihtiyacın olanı sealizers_class altına yaz.

Kullanıcının admin user olup olmadığını staff status'dan anlayabilirsin.

TOKEN Authentication
Token mantığı --> Her kullanıcı için bir token oluşturuluyor. Kullanıcı Login olduğunda oluşturulup Logout olduğunda silinir.

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ]
} --> settings.py'a ekle.

INSTALLED_APPS = [
    ...
    'rest_framework.authtoken'
]

- Yukarıdaki işlemler sonucu tokenlerin tutulacağı bir tablo oluşturulması gerekir bunun için 
manage.py migrate  --> Çalıştır.
- Admin panelden manuel token oluştur.
- Auth: Token Tokennumarası  --> Postman/Headers Token'u Auth (oluştur) keyinin Valuesi olarak Token Tokennumarası şeklinde yaz.arada boşluk var unutma.

Authentication işlemlerinde CUSTOM
(# https://www.django-rest-framework.org/api-guide/validators/)
- Dafault olarak Django authentication işleminde email'i zorunlu tutmuyor. Biz Bu email'i zorunlu ve uniq olsun istiyoruz. O zaman bir sealizers.py oluşturup 
from django.contrib.auth.models import User 'dan import ettiğimiz user.model'i costum ederek bu amacımızı gerçekleştiriyoruz. Detaylar (009. Derste)

- Serializer oluşturduktan sonra wiews'i oluşturuyoruz. Detaylar dosyada.

_ Yukardaki işlemler yapıldı ama token ürtilmedi Token üretmenin farkı yolları mevcut. https://www.django-rest-framework.org/api-guide/authentication/

-By exposing an api endpoint: Bu yöntemde login endpointi oluşturuyor. Kullanıcı Username ve password'unu giriyor ve bir post işlemi gerçekleşiyor. DB'e token olup olmadığını kontrol ediyor. token varsa Response olarak varolan token dönüyor. Yoksa oluşturup response ediyor. Bunu için Bir import ve path oluşturuyoruz. Sonrasında Bu kullanıcının yaptığı her istek bu Token ile gerçekleşecek.

from rest_framework.authtoken import views
path('login/', views.obtain_auth_token)

- Register olunduğunda response ile birlikte token'inde dönerek login sayfasına gitmeden direk auth olabilmek için:
- generic/mixins'den create metodunu override yapıyoruz. respose'a token'i de dahil ediyoruz. Bu işlemler view.py'da yapılıyor.