RANDON VERİ ÜRETİMİ İÇİN;
https://faker.readthedocs.io/en/master/
1- pip install Faker  --> Kur.
2- Proje içerisinde faker.py dosyası oluştur.
3- Dosya içerisine foknsiyon yaz.

"""from .models import Path, Student
from faker import Faker
# Rastgele veri üreten kütüphane.
def run():
    '''
        # https://faker.readthedocs.io/en/master/
        $ pip install faker # install faker module
        python manage.py flush # delete all exists data from db. dont forget: createsuperuser
        python manage.py shell
        from student_api.faker import run
        run()
        exit()
    '''
    fake = Faker(['tr-TR'])
    paths = (
        "FullStack",
        "DataScience",
        "AwsDevops",
        "CyberSec",
    )
    for path in paths:
        new_path = Path.objects.create(path_name = path)
        for _ in range(50):
            Student.objects.create(path = new_path, first_name = fake.first_name(), last_name = fake.last_name(), number = fake.pyint())
    print('Finished')"""

4- içerisindeki fonksiyonu shell'de de çalıştırılabilir.

PAGINATION
https://www.django-rest-framework.org/api-guide/pagination/#pagenumberpagination
1- PageNumberPagination
2- LimitOffsetPagination
3- CursorPagination

-Pagination Kullanımı: (2 çeşit Kullanım mevcut.)
a- Global: Settings  dosyasına aşağıdaki komutu yapıştır.
REST_FRAMEWORK = {
    # 'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 2,
    
    # 'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.LimitOffsetPagination',
    # 'PAGE_SIZE': 5,
    
    # 'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.CursorPagination',
    # 'PAGE_SIZE': 4, # default'u testen sıralamak.
    
    # filter
    # 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    
    # search
    # 'DEFAULT_FILTER_BACKENDS': ['rest_framework.filters.SearchFilter'],

    # filter + search + ordering
    # 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend', 'rest_framework.filters.SearchFilter', 'rest_framework.filters.OrderingFilter'],
}
#** Her sayfada 20 sutun olacak şekilde sayfalara böl. 
# Bu işlem sonrası veriler result içerisinde dönmeye başlar. ve aşağıdaki ilave objeler sunulur.
 "count": 200,
    "next": "http://127.0.0.1:8000/api/student/?page=2",
    "previous": null,
    "results": [...]

b- Custom Pagination: 
 1- App altında Pagination.py isimli bir dosya oluştur.
 2- import et ve fonksiyonu yaz.

 from rest_framework.pagination import (
    PageNumberPagination,
    LimitOffsetPagination,
    CursorPagination
)
class CustomPageNumberPagination(PageNumberPagination):
    page_size = 5 # Her sayfada 5 adet.
    page_query_param = 'sayfa' # URL'de page yerine sayfa yazıyor.

class CustomLimitOffsetPagination(LimitOffsetPagination):
    default_limit = 10 # Her sayfada 10 adet.
    limit_query_param = 'adet' # URL satısında limit yerine adet yazar.
    offset_query_param = 'baslangic' # URL satısında offset yerine baslangic yazar.

class CustomCursorPagination(CursorPagination):

    cursor_query_param = 'imlec'  # URL satırında cursor yerine imleç yazar.
    page_size = 10  # 1 sayfada gösterilecek sutun sayısı
    ordering = "-id" # id'ye göre tersden sıralama.

3- view'de ilgili viev içerisinde import ederek kullan (serializer_class altında.).
# pagination_class=CustomPageNumberPagination

4- CursorPagination kullanılabilmesi için modelde created isimli bir field oluşturduk. created'in sebebi CursorPagination sourccode'unda default değerinden Cursor Nerde kalmışsa oradan devam eder.

FİLTER
a- Globalde:
pip install django-filter  --> yükle
INSTALLED_APPS = ['django_filters']  --> settings.py ye ekle.
REST_FRAMEWORK = {
    # filter + search + ordering
    # 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend', 'rest_framework.filters.SearchFilter', 'rest_framework.filters.OrderingFilter'],
} --> REST_FRAMEWORK ekle.
filterset_fields = ['field_name'] --> Hangi stunlara göre filtreleme yapmak istiyorsan views'a ekle.

b- CustomFilter --> views içerisinde.
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.filters import SearchFilter, OrderingFilter  --> import et
filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter] --> Hangi filtreleme yöntemini istiyorsan seç.
filterset_fields = ['first_name', 'last_name'] --> Hangi stunlara göre filtreleme yapmak istiyorsan. Birebir eşleşme olmazsa boş döner.

search_fields = ['^first_name'] -->  baş harfine göre arama yapmak için, 'first_name', 'last_name' fieldlerine göre arama yapar. '^' işareti olmadığında first_name içerisinde belirtilen karakteri arar. işaret konulduğunda belirtilen karakterle başlayan datalar döndürülür.
ordering_fields = ['id']  --> filter boxta hangi seçenekler çıksın istiyorsanız onu yazıyorsunuz
ordering = ['-id']  --> default olarak ilk açıldığında buraya yazdığımıza göre sıralıyor. (-) Tersten.